// ─── Объекты ─────────────────────────────────────────────────────────────────

// Перебираемые объекты – это обобщение массивов. Концепция, которая позволяет использовать любой объект в цикле for..of.

let range = {
	from: 1,
	to: 5,

	// Для того что бы мы могли итерироваться по объекту нужно добавить итератор 
	// 1. вызов for..of сначала вызывает эту функцию
	[Symbol.iterator]: function () {
		// ...она возвращает объект итератора:
		// 2. Далее, for..of работает только с этим итератором, запрашивая у него новые значения
		return {
			current: this.from,
			last: this.to,

			// 3. next() вызывается на каждой итерации цикла for..of
			next() {
				// 4. он должен вернуть значение в виде объекта {done:.., value :...}
				if (this.current <= this.last) {
					return { done: false, value: this.current++ };
				} else {
					return { done: true };
				}
			}
		};
	}
};

// Результат вызова next() должен иметь вид {done: Boolean, value: any}, 
// где done=true означает, что цикл завершён, в противном случае value содержит очередное значение.


for (let num of range) {
	// console.log(num); // 1, затем 2, 3, 4, 5
}

// Недостаток такого подхода в том, что теперь мы не можем использовать этот объект в двух параллельных циклах for..of: 
// у них будет общее текущее состояние итерации, потому что теперь существует лишь один итератор – сам объект.


// ─── Строки ──────────────────────────────────────────────────────────────────

for (let char of "test") {
	// console.log(char); // срабатывает 4 раза: по одному для каждого символа
}


// Явный вызов итератора 

let str = "Hello";

// делает то же самое, что и
// for (let char of str) alert(char);

let iterator = str[Symbol.iterator]();

while (true) {
	let result = iterator.next();
	if (result.done) break;
	// console.log(result.value); // выводит символы один за другим
}

// Такой подход дает больше контроля над процессом 
// Мы можем разбить процесс итерации на части: перебрать немного элементов, затем остановиться, сделать что-то ещё и потом продолжить.



// ВАЖНО есть 2 термина которые нельзя путать:
// Итерируемые объекты – это объекты, которые реализуют метод Symbol.iterator, как было описано выше.
// Псевдомассивы – это объекты, у которых есть индексы и свойство length, то есть, они выглядят как массивы.


// ─── Array.from ──────────────────────────────────────────────────────────────

// метод Array.from, который принимает итерируемый объект или псевдомассив и делает из него «настоящий» Array
let arrayLike = {
	0: "Hello",
	1: "World",
	length: 2
};

let arr = Array.from(arrayLike);

// Метод from умеет работать с суррогатными парами  
let strFrom = '𝒳😂';

// разбивает строку на массив её элементов
let charsFrom = Array.from(strFrom);


// Это тоже самое что и обычный цикл просто короче

let charsFor = []; // Array.from внутри себя выполняет тот же цикл
for (let char of strFrom) {
	charsFor.push(char);
}