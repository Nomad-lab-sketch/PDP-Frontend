// Смысл всех этих структур в том что в качестве ключей их коллекций выступает не примитив, 
// а объект, соответственно если в памяти компьютера объект что мы указали в качестве ключа больше не существует, 
// в структурах WeakMap/WeakSet эти поля тоже удалятся автоматически т.к эти структуры не предотвращают
// удаление объектов сборщиком мусора, когда эти объекты выступают в качестве ключей.


// ─── Weakmap ─────────────────────────────────────────────────────────────────

// Отличие от map в том что в качестве ключа должен быть не примитив, а объект

// cache.js
let cache = new WeakMap();

// вычисляем и запоминаем результат
function process(obj) {
	if (!cache.has(obj)) {
		let result = /* вычисляем результат для объекта */ obj;

		cache.set(obj, result);
	}

	return cache.get(obj);
}

// main.js
let obj = {/* какой-то объект */ };

let result1 = process(obj);
let result2 = process(obj);

// ...позже, когда объект больше не нужен:
obj = null;

// Нет возможности получить cache.size, так как это WeakMap,
// но он равен 0 или скоро будет равен 0
// Когда сборщик мусора удаляет obj, связанные с ним данные из кеша тоже удаляются


// ─── Weakset ─────────────────────────────────────────────────────────────────

// Коллекция WeakSet ведёт себя похоже
// Она аналогична Set, но мы можем добавлять в WeakSet только объекты (не примитивные значения).
// Объект присутствует в множестве только до тех пор, пока доступен где-то ещё.
// Как и Set, она поддерживает add, has и delete, но не size, keys() и не является перебираемой.

let visitedSet = new WeakSet();

let john = { name: "John" };
let pete = { name: "Pete" };
let mary = { name: "Mary" };

visitedSet.add(john); // John заходил к нам
visitedSet.add(pete); // потом Pete
visitedSet.add(john); // John снова

// visitedSet сейчас содержит двух пользователей

// проверим, заходил ли John?
// console.log(visitedSet.has(john)); // true

// проверим, заходила ли Mary?
// console.log(visitedSet.has(mary)); // false

john = null;

// структура данных visitedSet будет очищена автоматически (объект john будет удалён из visitedSet)


// Наиболее значительным ограничением WeakMap и WeakSet является то, что их нельзя перебрать или взять всё содержимое. 

// WeakMap – это Map-подобная коллекция, позволяющая использовать в качестве ключей только объекты, 
// и автоматически удаляющая их вместе с соответствующими значениями, как только они становятся недостижимыми иными путями.
// WeakSet – это Set-подобная коллекция, которая хранит только объекты и удаляет их, как только они становятся недостижимыми иными путями.

// Обе этих структуры данных не поддерживают методы и свойства, работающие со всем содержимым сразу или возвращающие информацию о размере коллекции.