// Современные способы установки и прямого доступа к прототипу это:

// Object.create(proto[, descriptors]) – создаёт пустой объект со свойством [[Prototype]], 
// указанным как proto (может быть null), и необязательными дескрипторами свойств.

// Object.getPrototypeOf(obj) – возвращает свойство [[Prototype]] объекта obj 
// (то же самое, что и геттер __proto__).

// Object.setPrototypeOf(obj, proto) – устанавливает свойство [[Prototype]] 
// объекта obj как proto (то же самое, что и сеттер __proto__).


// Встроенный геттер/сеттер __proto__ не безопасен, 
// если мы хотим использовать созданные пользователями ключи в объекте. 
// Как минимум потому, что пользователь может ввести "__proto__" как ключ, 
// от чего может возникнуть ошибка. Если повезёт – последствия будут лёгкими, 
// но, вообще говоря, они непредсказуемы.



// Объекты без свойства proto - это объекты, у которых нет свойства proto, 
// которое указывает на их прототип. 
// Вместо этого они создаются с помощью функции Object.create(null), 
// которая создает объект без прототипа. 
// Такие объекты не наследуют свойства и методы от стандартных прототипов JavaScript, 
// таких как Object.prototype или Array.prototype, 
// что может быть полезно в некоторых случаях, 
// когда нужно создать объект с определенными свойствами, 
// но без наследования стандартных методов и свойств.

// Свойство proto не безопасно, потому что оно может быть изменено или переопределено, 
// что может привести к неожиданным результатам при работе с объектами. 
// Кроме того, использование свойства proto может замедлить производительность 
// приложения из-за поиска методов в цепочке прототипов. 
// Вместо этого рекомендуется использовать методы и свойства, определенные непосредственно в объекте или его прототипе, 
// а также создавать объекты без прототипа при необходимости.