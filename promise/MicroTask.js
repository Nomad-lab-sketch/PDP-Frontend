// Асинхронные задачи требуют правильного управления.
// Для этого стандарт предусматривает внутреннюю очередь PromiseJobs,
// более известную как «очередь микрозадач (microtask queue)» (термин V8).


// Очередь определяется как первым-пришёл-первым-ушёл (FIFO): 
// задачи, попавшие в очередь первыми, выполняются тоже первыми.
// Выполнение задачи происходит только в том случае, если ничего больше не запущено.


// Обработка промисов всегда асинхронная, т.к. все действия 
// промисов проходят через внутреннюю очередь «promise jobs», 
// так называемую «очередь микрозадач (microtask queue)» (термин v8).

// Таким образом, обработчики .then/catch/finally вызываются после выполнения текущего кода.

// Если нам нужно гарантировать выполнение какого-то кода после 
// .then/catch/finally, то лучше всего добавить его вызов в цепочку .then.

// В большинстве движков JavaScript, включая браузеры и Node.js, 
// микрозадачи тесно связаны с так называемым «событийным циклом» и «макрозадачами». 
// Так как они не связаны напрямую с промисами