// setTimeout позволяет вызвать функцию один раз через определённый интервал времени.
// setInterval позволяет вызывать функцию регулярно, повторяя вызов через определённый интервал времени.

function sayHi(phrase, who) {
	console.log(phrase + ', ' + who);
}

setTimeout(sayHi, 1000, "Привет", "Джон"); // Привет, Джон

// Вызов setTimeout возвращает «идентификатор таймера» timerId, который можно использовать для отмены дальнейшего выполнения.

// let timerId = setTimeout(...);
// clearTimeout(timerId);



// Метод setInterval имеет такой же синтаксис как setTimeout:

// повторить с интервалом 2 секунды
let timerId1 = setInterval(() => console.log('tick'), 2000);


// ─── Вложенный Settimeout ────────────────────────────────────────────────────

let timerId2 = setTimeout(function tick() {
	alert('tick');
	timerId = setTimeout(tick, 2000); // (*)
}, 2000);

//   Вложенный setTimeout – более гибкий метод, чем setInterval. 
// С его помощью последующий вызов может быть задан по-разному в зависимости от результатов предыдущего.


// ─── Settimeout С Нулевой Задержкой ──────────────────────────────────────────


// Это планирует вызов func настолько быстро, насколько это возможно. 
// Но планировщик будет вызывать функцию только после завершения выполнения текущего кода.


// таймер в браузере может замедляться по многим причинам:

// Перегружен процессор.
// Вкладка браузера в фоновом режиме.
// Работа ноутбука от аккумулятора.