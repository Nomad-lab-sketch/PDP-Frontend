// В JavaScript функции – это объекты.

// ─── Свойство Name ───────────────────────────────────────────────────────────

// Например, имя функции нам доступно как свойство «name»:

function sayHi() {
}
//   console.log(sayHi.name); // sayHi


// ─── Свойство Length ─────────────────────────────────────────────────────────

// Встроенное свойство «length» содержит количество параметров функции в её объявлении. Например:

function f1(a) { }

// console.log(f1.length); // 1


// ─── Пользовательские Свойства ───────────────────────────────────────────────

function sayHiCustom() {
	sayHiCustom.counter++;
}
sayHiCustom.counter = 0; // начальное значение

sayHiCustom(); // Hi
sayHiCustom(); // Hi
sayHiCustom(); // Hi

console.log(sayHiCustom.counter) // 3 раз вызвана.


// name – имя функции. Обычно берётся из объявления функции, но если там нет – JavaScript пытается понять его из контекста.
// length – количество аргументов в объявлении функции. Троеточие («остаточные параметры») не считается.


// ─── Named Function Expression ───────────────────────────────────────────────

// Named Function Expression или NFE – это термин для Function Expression, у которого есть имя.

let sayHiNFE = function func(who) {
	console.log(`Hello, ${who}`);
};

// Функция до сих пор доступна как sayHiNFE

// функция всё ещё задана как Function Expression. 
// Добавление "func" после function не превращает объявление в Function Declaration, 
// потому что оно все ещё является частью выражения присваивания.

// Есть две важные особенности имени func, ради которого оно даётся:

// Оно позволяет функции ссылаться на себя же.
// Оно не доступно за пределами функции.


let sayHi = function func(who) {
	if (who) {
		console.log(`Hello, ${who}`);
	} else {
		func("Guest"); // использует func, чтобы снова вызвать себя же
	}
};

  // Имя у функции как раз в этом случае кстати т.к использовать имя переменной куда записана функция опасно,
  // потому что эту переменную можно переопределить и код сломается. 