function sayHi() {
	var phrase = "Привет"; // локальная переменная, "var" вместо "let"

	alert(phrase); // Привет
}

sayHi();

//   console.log(phrase); // Ошибка: phrase не определена


// Область видимости переменных var ограничивается либо функцией, либо, если переменная глобальная, то скриптом. 
// Такие переменные доступны за пределами блока.

if (true) {
	var test = true; // используем var вместо let
}

alert(test); // true, переменная существует вне блока if


for (var i = 0; i < 10; i++) {
	// ...
}

console.log(i); // 10, переменная i доступна вне цикла, т.к. является глобальной переменной


// ─── Var Допускает Повторное Объявление ──────────────────────────────────────


// Используя var, можно переобъявлять переменную сколько угодно раз. Повторные var игнорируются:

var user = "Pete";

var user = "John";

alert(user); // John

// ─── Var Обрабатываются В Начале Запуска Функции ─────────────────────────────

// переменные var считаются объявленными с самого начала исполнения функции вне зависимости от того, 
// в каком месте функции реально находятся их объявления (при условии, что они не находятся во вложенной функции).

function sayHi() {
	phrase = "Привет";

	alert(phrase);

	var phrase;
}
sayHi();

// Технически полностью эквивалентен следующему (объявление переменной var phrase перемещено в начало функции):

function sayHi2() {
	var phrase;

	phrase = "Привет";

	alert(phrase);
}
sayHi2();

//   Это поведение называется «hoisting» (всплытие, поднятие), потому что все объявления переменных var «всплывают» в самый верх функции.



// ─── Immediately-invoked Function Expressions Сокращенно Iife ────────────────


(function () {

	var message = "Hello";

	alert(message); // Hello

})();

//   Здесь создаётся и немедленно вызывается Function Expression. Так что код выполняется сразу же и у него есть свои локальные переменные.
