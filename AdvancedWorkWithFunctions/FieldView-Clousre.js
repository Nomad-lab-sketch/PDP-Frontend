// Область видимости переменных в JavaScript определяет, где и какие переменные могут быть доступны в коде. 
// В JavaScript есть два типа области видимости: глобальная и локальная.

// Глобальная область видимости означает, что переменная доступна во всем коде программы. 
// Она объявляется вне функций и блоков кода.
const globalVariable = "I am a global variable";

function myFunction() {
	console.log(globalVariable); // доступ к глобальной переменной из функции
}

myFunction(); // выводит "I am a global variable"
// console.log(globalVariable); // доступ к глобальной переменной вне функции, выводит "I am a global variable"

// Локальная область видимости означает, что переменная доступна только внутри определенной функции или блока кода. 
// Она объявляется внутри функций или блоков кода.
function myFunction() {
	const localVariable = "I am a local variable"; // объявление локальной переменной
	console.log(localVariable); // доступ к локальной переменной внутри функции
}

myFunction(); // выводит "I am a local variable"
//   console.log(localVariable); // ошибка, так как переменная не определена в глобальной области видимости



// Замыкание (closure) - это функция, которая имеет доступ к переменным из внешней области видимости, 
// даже после того, как эта область видимости была закрыта. 
// Замыкание возникает, когда функция вложена в другую функцию и использует переменные из внешней функции.

function outerFunction() {
	const outerVariable = "I am an outer variable"; // объявление переменной во внешней функции

	function innerFunction() {
		console.log(outerVariable); // доступ к переменной из внешней функции
	}

	return innerFunction; // возвращаем внутреннюю функцию
}

const closure = outerFunction(); // вызываем внешнюю функцию и сохраняем результат в переменную

closure(); // выводит "I am an outer variable", так как внутренняя функция имеет доступ к переменной из внешней функции



// ─── Сборка Мусора ───────────────────────────────────────────────────────────

// Обычно лексическое окружение удаляется из памяти вместе со всеми переменными после завершения вызова функции.

// Однако если существует вложенная функция, которая все еще доступна после завершения функции, то она имеет свойство [[Environment]], 
// ссылающееся на лексическое окружение.

function f() {
	let value = 123;

	return function () {
		alert(value);
	}
}

let g = f(); // g.[[Environment]] хранит ссылку на лексическое окружение
  // из соответствующего вызова f()

