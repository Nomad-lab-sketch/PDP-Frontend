// ─── События Mouseover/Mouseout Relatedtarget ────────────────────────────────

// Событие mouseover происходит в момент, когда курсор оказывается над элементом, 
// а событие mouseout – в момент, когда курсор уходит с элемента.

// Эти события являются особенными, потому что у них имеется свойство relatedTarget. 
// Оно «дополняет» target. Когда мышь переходит с одного элемента на другой, 
// то один из них будет target, а другой relatedTarget.

// Некоторые элементы могут быть пропущены браузером FROM > div > div > TO 

// ─── Делегирование Событий ───────────────────────────────────────────────────

// События mouseenter/leave просты и легки в использовании. Но они не всплывают. 
// Таким образом, мы не можем их делегировать.

// Ситуация с таблицей когда нам надо обрабатывать события движения мыши по ячейкам

// Очевидное решение – определить обработчик на родительском элементе 
{/* <table> и там обрабатывать возникающие события. */ }

// Что ж, не проблема – будем использовать mouseover/mouseout.

// выделим элемент под мышью
table.onmouseover = function (event) {
	let target = event.target;
	target.style.background = 'pink';
};

table.onmouseout = function (event) {
	let target = event.target;
	target.style.background = '';
};

// Мы хотим обрабатывать именно переходы между ячейками, остальные события было бы не плохо отфильтровать 

// Можно достичь этого так:

// Запоминать текущую ячейку <td> в переменную, которую назовём currentElem.
// На mouseover – игнорировать событие, если мы всё ещё внутри той же самой ячейки <td>.
// На mouseout – игнорировать событие, если это не уход с текущей ячейки <td>.

// ячейка <td> под курсором в данный момент (если есть)
let currentElem = null;

table.onmouseover = function (event) {
	// перед тем, как войти на следующий элемент, курсор всегда покидает предыдущий
	// если currentElem есть, то мы ещё не ушли с предыдущего <td>,
	// это переход внутри - игнорируем такое событие
	if (currentElem) return;

	let target = event.target.closest('td');

	// переход не на <td> - игнорировать
	if (!target) return;

	// переход на <td>, но вне нашей таблицы (возможно при вложенных таблицах)
	// игнорировать
	if (!table.contains(target)) return;

	// ура, мы зашли на новый <td>
	currentElem = target;
	target.style.background = 'pink';
};


table.onmouseout = function (event) {
	// если мы вне <td>, то игнорируем уход мыши
	// это какой-то переход внутри таблицы, но вне <td>,
	// например с <tr> на другой <tr>
	if (!currentElem) return;

	// мы покидаем элемент – но куда? Возможно, на потомка?
	let relatedTarget = event.relatedTarget;

	while (relatedTarget) {
		// поднимаемся по дереву элементов и проверяем – внутри ли мы currentElem или нет
		// если да, то это переход внутри элемента – игнорируем
		if (relatedTarget == currentElem) return;

		relatedTarget = relatedTarget.parentNode;
	}

	// мы действительно покинули элемент
	currentElem.style.background = '';
	currentElem = null;
};