// События указателя (Pointer events) – это современный способ обработки ввода с помощью различных
// указывающих устройств, таких как мышь, перо/стилус, сенсорный экран и так далее.

// о сенсорные устройства во многих аспектах мощнее, чем мышь. Например, они позволяют касаться экрана 
// сразу в нескольких местах («мульти-тач»). Однако, события мыши не имеют необходимых свойств для обработки 
// таких прикосновений.

// Поэтому появились события касания (Touch events), такие как touchstart, touchend, touchmove

// Но и этих событий оказалось недостаточно, так как существует много других устройств, 
// таких как перо, у которых есть свои особенности. Кроме того, универсальный код, который 
// отслеживал бы и события касаний и события мыши, неудобно писать.

// Для решения этих задач был внедрён стандарт Pointer Events («События Указателя»). 
// Он предоставляет единый набор событий для всех типов указывающих устройств.

// Типы событий указателя
// Схема именований событий указателя похожа на события мыши:

// Событие указателя	Аналогичное событие мыши
// pointerdown	        mousedown
// pointerup	        mouseup
// pointermove	        mousemove
// pointerover	        mouseover
// pointerout	        mouseout
// pointerenter     	mouseenter
// pointerleave     	mouseleave
// pointercancel	    -
// gotpointercapture	-
// lostpointercapture	-

// Мы можем заменить события mouse... на аналогичные pointer... в коде и быть уверенными, 
// что с мышью по-прежнему всё будет работать нормально.

// ─── Свойства Событий Указателя ──────────────────────────────────────────────

// События указателя содержат те же свойства, что и события мыши, например clientX/Y, target и т.п., 
// и несколько дополнительных:

// pointerId – уникальный идентификатор указателя, вызвавшего событие.
// pointerType – тип указывающего устройства. 
// isPrimary – равно true для основного указателя (первый палец в мульти-тач).

// ─── Мульти-тач ──────────────────────────────────────────────────────────────

// Одной из функций, которую абсолютно не поддерживают события мыши, является мульти-тач

// При касании первым пальцем:
// происходит событие pointerdown со свойством isPrimary=true и некоторым pointerId.
// При касании вторым и последующими пальцами (при остающемся первом):
// происходит событие pointerdown со свойством isPrimary=false и уникальным pointerId для каждого касания.

// ─── Событие: Pointercancel ──────────────────────────────────────────────────

// Событие pointercancel происходит, когда текущее действие с указателем по какой-то причине прерывается, 
// и события указателя больше не генерируются.

// К таким причинам можно отнести:

// Указывающее устройство было физически выключено.
// Изменилась ориентация устройства (перевернули планшет).
// Браузер решил сам обработать действие, считая его жестом мыши, масштабированием и т.п.

// ─── Захват Указателя ────────────────────────────────────────────────────────

// Основной метод:

// elem.setPointerCapture(pointerId) – привязывает события с данным pointerId к elem.
//  После такого вызова все события указателя с таким pointerId будут иметь elem в качестве целевого элемента
//  (как будто произошли над elem), вне зависимости от того, где в документе они произошли.

// Другими словами, elem.setPointerCapture(pointerId) меняет target всех 
// дальнейших событий с данным pointerId на elem.

// Эта привязка отменяется:

// автоматически, при возникновении события pointerup или pointercancel,
// автоматически, если elem удаляется из документа,
// при вызове elem.releasePointerCapture(pointerId).

// Захват указателя используется для упрощения операций с переносом (drag’n’drop) элементов.


thumb.onpointerdown = function (event) {
	// перенацелить все события указателя (до pointerup) на thumb
	thumb.setPointerCapture(event.pointerId);
	// начать отслеживание перемещения указателя
	thumb.onpointermove = function (event) {
		// перемещение слайдера: отслеживание thumb, т.к все события указателя перенацелены на него
		let newLeft = event.clientX - slider.getBoundingClientRect().left;
		thumb.style.left = newLeft + 'px';
	};
	// если сработало событие pointerup, завершить отслеживание перемещения указателя
	thumb.onpointerup = function (event) {
		thumb.onpointermove = null;
		thumb.onpointerup = null;
		// ...при необходимости также обработайте "конец перемещения"
	};
};
  // примечание: нет необходимости вызывать thumb.releasePointerCapture,
  // это происходит автоматически при pointerup

// Захват указателя может использоваться для решения проблемы "слипания" элементов при перетаскивании, 
// когда мышь выходит за границы элемента и начинает взаимодействовать с другими элементами на странице.